---
title: Programming for Scientists (Autumn 2012)
categories: work
permalink: projects/pfs-09-2012/
---

Dates & Times
-------------

**Session  I**: Sep 14 (15h00-17h00). All day (9h00-18h00) Sep 17 & 24

**Session II**: Oct 11 (15h00-17h00). All day (9h00-18h00) Oct 15 & 22

There will be a break from 12h30 to 14h00 in the all day sessions (if you want
to attend the Monday seminar).

Tentative Schedule
------------------

This is subject to changes (up until class time)

I added slide links below, but the presentations rely heavily on live coding
demonstration and dialogue with the students. Therefore, if you did not attend
the class, this will not be very helpful.

Intro Session
~~~~~~~~~~~~~

- Introduction to course. Instructor.
- Syllabus.
- Discussion of necessary software.
- Introduction to programming (Python I).

[`slides 01 </files/pfs/09-12/01-intro.pdf>`__]

[`slides 02 </files/pfs/09-12/02-python-i.pdf>`__]

Day I
~~~~~

**9h00-10h10**
    Python II [`slides 03 </files/pfs/09-12/03-python-ii.pdf>`__]
**10h20-11h30**
    Numpy & matplotlib [`slides 04 </files/pfs/09-12/04-numpy.pdf>`__]
**11h40-12h25**
    Guided exercises [`slides 05 </files/pfs/09-12/05-guided.pdf>`__ ]

Break (you can go to the Monday Lecture at 12h30)

**14h00-15h20**
    Python III [`slides 06 </files/pfs/09-12/06-python-iii.pdf>`__]
**15h30-16h30**
    Numeric issues [`slides 07 </files/pfs/09-12/07-numerical.pdf>`__]
**16h40-18h00**
    File formats & parsing. FastQ example [`slides 08 </files/pfs/09-12/08-fileparsing.pdf>`__]


Day II
~~~~~~

**9h00-10h20**
    HW Review/In-class Quiz [`slides 09 </files/pfs/09-12/09-hw-review.pdf>`__ and `possible solution </files/pfs/09-12/trim.py>`__]
**10h30-11h30**
    Open Source Software [`slides 10 </files/pfs/09-12/10-open-source.pdf>`__]
**11h40-12h25**
    Unit tests [`slides 11 </files/pfs/09-12/11-tests.pdf>`__]

Break (you can go to the Monday Lecture at 12h30)

**14h00-15h20**
    Python IV [`slides 12 </files/pfs/09-12/12-python-iv.pdf>`__]
**15h30-16h30**
    Guided exercises [`slides 13 </files/pfs/09-12/13-guided.pdf>`__]
**16h40-18h00**
    Review [`slides 14 </files/pfs/09-12/14-final.pdf>`__]
    Alternative (image processing) Ending [`slides 14 </files/pfs/09-12/14-final-image.pdf>`__]: images used: `DNA </files/pfs/09-12/00-001-dna.tiff>`__ and `protein </files/pfs/09-12/00-001-protein.tiff>`__

Homework
--------

The homework is optional (there are no grades in this class). However, if you
do turn it in, you will get feedback on it (i.e., if you want to try it as a
learning experience, I will give you feedback). Also, at the start of day II, I
will go over my solution.

I will discuss the assignment in class, but here it is for reference:

1. Download the `FastQ data </files/pfs/hw-HeLa.fq>`__ (or `compressed </files/pfs/hw-HeLa.fq.gz>`__).
2. Write a Python script that reads in the file and plots the average quality
   and standard deviation per base position (like FastQC does, if you are
   familiar with that tool).
3. Write a second Python script (or extend the one above) that trims & filters
   the sequence (see below).
4. Write a third Python script (or extend the one above) that plots a histogram
   of sequence sizes **after trimming** (before trimming all sequences have the
   same size).

Use the following trim & filter criteria: given a minimum base quality (you can
use the value **24** as a baseline), look for the longest substring *such that
all bases in that substring are (strictly) above the minimum*. If the
resulting string is too small (you can use the value **30** as the minimum
number of basepairs), discard the sequence.

Here are some possible variations:

- Can you write the script so that the inputs, outputs, and thresholds are
  given on the command line?
- Can you do it all in one pass through the data (and in a single script file)?
  Why would this be better/worse?
- Semi-Advanced: can you do this using `HTSeq
  <http://www-huber.embl.de/users/anders/HTSeq/doc/overview.html>`__ (by the
  way,HTSeq is a very good package for NGS processing)?


FAQ
---

**Do I need to bring computer?**

The course will take place in the computer labs and I have asked that the
necessary software be installed there. However, you will be asked to install it
on your own computer and, if you want to bring a laptop to class, that is a
good idea too.

I will discuss this in the first session, but if you want to go ahead, please
install the following (for Windows):

http://code.google.com/p/pythonxy/

For Mac OS, please install EPD:
http://www.enthought.com/products/epd.php

(It is free of cost for academics).

For Linux, just use your own distributions' package manager. You will need the
following packages:

- python
- python-numpy
- python-matplotlib

**Why are you teaching Python?**

Python is a modern language which is increasingly used for scientific
programming. It is open-source and has a thriving open-source community of
scientific software.

Related Links
-------------

Learn More
~~~~~~~~~~

- `Online Python Tutor <http://people.csail.mit.edu/pgbovine/python/tutor.html>`__
- `How to Think Like a Computer Scientist <http://interactivepython.org/courselib/static/thinkcspy/index.html>`__
- `Pythonvision <http://www.pythonvision.org>`__ (computer vision in Python)
- `Software Carpentry <http://software-carpentry.org/>`__
- `Software Carpentry Blog <http://softwarecarpentry.wordpress.com/>`__

Other
~~~~~

- `Science Code Manifesto <http://sciencecodemanifesto.org/>`__
- `Opinion paper on reproducible science <http://www.nature.com/nature/journal/v482/n7386/full/nature10836.html>`__ (published in *Nature*)
- `Spring 2009 </pfs>`__ website for the course in Spring 2009

